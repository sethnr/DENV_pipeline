import os
import sys
import datetime as dt
import shutil

from pathag_pipeline.utils import misc
#from pathag_pipeline.scripts import visualisations
#from pathag_pipeline.scripts import make_summary_files

cwd = os.getcwd()

wildcard_constraints:
    indir={config["indir"]},
    tmpdir={config["tmpdir"]},
    outdir={config["outdir"]}
    


rule all: 
    input:
        os.path.join(config["outdir"], "results/summary", "virus_calls.tsv"),
        os.path.join(config["outdir"], "results", "variant_plot.pdf")

rule getstrain:
    input:
        read_location = os.path.join(config["indir"], "{sample}")
    output:
        mashout = "{outdir}/results/mash/{sample}_mash.txt",
        mashcalls = "{outdir}/results/mash/{sample}_calls.txt"
    resources:
        partition="day",
        mem_mb="8G",
        cpus_per_task=1,
        runtime=300
    container: "docker://sethnr/pgcoe_anypipe:0.01"
    params:
        reads=10000, # compare top N reads to refs
        bloom=10,    # bloom filter kmers with < N coverage (seq errors)
        gsize="11k", # estimated genome size (for prob assignment)
        prob=1e-50,  # max mash prob to call
        dist=0.25,   # max mash dist to call
    	masher = os.path.join(workflow.current_basedir,"scripts","masher.sh"),
        prefix="{outdir}/results/mash/{sample}",
	refdir=config["reference_directory"],
    log: 
        "{outdir}/log_files/getstrain_{sample}.log", 
    shell:
        """
        {params.masher} -f {params.refdir}/allrefs.msh \
		-r {params.reads} -b {params.bloom} -g {params.gsize} \
		-d {params.dist} -p {params.prob} \
        -o {params.prefix} \
        {input.read_location}  2>{log}

        """

rule mapper:
    input:
        read_location = os.path.join(config["indir"], "{sample}"),
        mashcalls = "{outdir}/results/mash/{sample}_calls.txt"
    output:
	#bams = os.path.join(config["tmpdir"], "{sample}_{target}.bam"),
	bams = expand("{{tmpdir}}/bams/{{sample}}_{target}.bam",target=TARGETS)
    log:
        log = os.path.join(config["outdir"], "log_files", "_".join(["{sample}", "mapping.log"]))
    params:
        mapper_script = os.path.join(workflow.current_basedir,"scripts","mapper.sh"),
        primer_dir = config["reference_directory"],
        tempdir = config["tempdir"],
    resources:
        partition="day",
        mem_mb="40G",
        cpus_per_task=4,
        runtime=300
    container: "docker://sethnr/pgcoe_anypipe:0.01"
    shell:"""
	{params.mapper_script}  -c {input.mashcalls} \
                -n {wildcards.sample} -p {params.primer_dir} -s {params.python_script} \
                -e {params.python_script2} -d {params.depth} -t {params.threshold} \
                -C {resources.cpus_per_task} -T {params.tempdir} -L {log.log} \
                {input.read_location}/*R1* {input.read_location}/*R2* \
                 >> {log.log} 2>&1
	    """


rule caller:
    input:
        bams = os.path.join(config["indir"], "{sample}_{target}.bam"),
        mashcalls = "{outdir}/results/mash/{sample}_calls.txt"
    output:
        individual_all_virustype_info = {outdir}/{sample}_all_virustype_info.txt"
    log:
        log = "{outdir}/log_files/{sample}_mapping.log"
    params:
        caller_script = os.path.join(workflow.current_basedir,"scripts","caller.sh"),
        depth = config["depth"],
        threshold = config["threshold"],
        tempdir = config["tempdir"],
        python_script = os.path.join(workflow.current_basedir,"serotype_caller.py"),
        python_script2 = os.path.join(workflow.current_basedir, "make_empty_files.py")
    resources:
        partition="day",
        mem_mb="40G",
        cpus_per_task=4,
        runtime=300
    container: "docker://sethnr/pgcoe_anypipe:0.01"
    shell:"""
	{params.caller_script}  -c {input.mashcalls} \
                -n {wildcards.sample} -p {params.primer_dir} -s {params.python_script} \
                -e {params.python_script2} -d {params.depth} -t {params.threshold} \
                -C {resources.cpus_per_task} -T {params.tempdir} -L {log.log} \
                {input.read_location}/*R1* {input.read_location}/*R2* \
                 >> {log.log} 2>&1
        
        if ! [-f "{params.tempdir}/{wildcards.sample}_all_virustype_info.txt"]; then 
            touch {params.tempdir}/{wildcards.sample}_all_virustype_info.txt
	fi
	    """


rule summary:
    input:
        #currently has to be like this (ie not rules.output) otherwise the wildcards don't work
        individual_all_virustype_info = expand(os.path.join(config["tempdir"], "{sample}_all_virustype_info.txt"), sample=config["sample_list"])
    output:
        serotype_calls = "{outdir}/results/summary/virus_calls.tsv",
        all_serotype_summary = "{outdir}/results/summary/summary_all_samples.tsv",
        top_serotype_summary = "{outdir}/results/summary/top_virus_all_samples.tsv",
        variant_summary_file = "{outdir}/results/summary/variants_summary.tsv"
    params:
        results_dir = "{outdir}/results",
        python_script = os.path.join(workflow.current_basedir,"scripts","make_summary_files.py")
    run:        
        print("summarising files")
        make_summary_files.summarise_files(config, input.individual_all_virustype_info, output.serotype_calls, output.top_serotype_summary, output.all_serotype_summary)
        
        if config["download"]:
            for directory in os.listdir(params.results_dir):
                if directory != "bam_files":
                    source = os.path.join(params.results_dir, directory)
                    dest = os.path.join(config["outdir"], "downloads")
                    shell("cp -r {source} {dest}")

        if not config["temp"]:
            shutil.rmtree(config["tempdir"])

rule make_qc_plots:
    input:
        serotype_calls_file = rules.summary.output.serotype_calls,
        variant_summary_file = rules.summary.output.variant_summary_file
    output:
        variant_plot = os.path.join(config["outdir"], "results", "variant_plot.pdf")
    params:
        results_dir = rules.summary.params.results_dir
    run:
        serotype_dict, colour_dict, patch_list = visualisations.prepare_for_plots(input.serotype_calls_file)
        
        visualisations.variant_plot(params.results_dir, input.variant_summary_file, serotype_dict, colour_dict, patch_list)
        if config["download"]:
            source = os.path.join(params.results_dir, "variant_plot.pdf")
            dest = os.path.join(config["outdir"], "downloads")
            shell("cp -r {source} {dest}")

        if config["ct_file"] and config["ct_column"] and config["id_column"]:
            visualisations.ct_plot(params.results_dir, config["ct_file"], config["ct_column"], config["id_column"], input.serotype_calls_file, serotype_dict, colour_dict, patch_list)
            if config["download"]:
                source = os.path.join(params.results_dir, "ct_plot.pdf")
                dest = os.path.join(config["outdir"], "downloads")
                shell("cp -r {source} {dest}")
